name: Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

env:
  AWS_REGION: ap-south-1
  TERRAFORM_VERSION: 1.5.0
  TF_WORKING_DIR: ./onlinecompiler terraform

jobs:
  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm_destroy == 'DESTROY'
    
    defaults:
      run:
        working-directory: ${{ env.TF_WORKING_DIR }}
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Verify Working Directory
      run: |
        pwd
        ls -la
        echo "Current working directory contents:"

    - name: Terraform Init
      id: init
      run: terraform init -input=false

    - name: Comprehensive Resource Cleanup
      run: |
        echo "Starting comprehensive resource cleanup..."
        
        # Get cluster information
        CLUSTER_ARN=$(aws ecs list-clusters | grep "online-compiler" || echo "")
        
        if [ ! -z "$CLUSTER_ARN" ]; then
          CLUSTER_NAME=$(echo $CLUSTER_ARN | cut -d'/' -f2 | tr -d '",')
          echo "Found cluster: $CLUSTER_NAME"
          
          # 1. Update and delete services
          echo "Cleaning up ECS services..."
          SERVICES=$(aws ecs list-services --cluster $CLUSTER_NAME --query 'serviceArns[]' --output text || echo "")
          if [ ! -z "$SERVICES" ]; then
            echo "$SERVICES" | tr '\t' '\n' | while read SERVICE_ARN; do
              SERVICE_NAME=$(echo $SERVICE_ARN | cut -d'/' -f3)
              echo "Updating service $SERVICE_NAME to 0 tasks"
              aws ecs update-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --desired-count 0 || true
            done
            
            # Wait for tasks to drain
            echo "Waiting for tasks to drain..."
            sleep 30
            
            # Delete services
            echo "$SERVICES" | tr '\t' '\n' | while read SERVICE_ARN; do
              SERVICE_NAME=$(echo $SERVICE_ARN | cut -d'/' -f3)
              echo "Deleting service $SERVICE_NAME"
              aws ecs delete-service --cluster $CLUSTER_NAME --service $SERVICE_NAME --force || true
            done
          fi
          
          # 2. Stop all tasks
          echo "Stopping all tasks..."
          TASKS=$(aws ecs list-tasks --cluster $CLUSTER_NAME --query 'taskArns[]' --output text || echo "")
          if [ ! -z "$TASKS" ]; then
            echo "$TASKS" | tr '\t' '\n' | while read TASK_ARN; do
              echo "Stopping task $TASK_ARN"
              aws ecs stop-task --cluster $CLUSTER_NAME --task $TASK_ARN || true
            done
          fi
          
          # Wait for tasks to stop
          echo "Waiting for tasks to stop..."
          sleep 30
          
          # 3. Deregister task definitions
          echo "Cleaning up task definitions..."
          TASK_DEFINITIONS=$(aws ecs list-task-definitions --family-prefix online-compiler --query 'taskDefinitionArns[]' --output text || echo "")
          if [ ! -z "$TASK_DEFINITIONS" ]; then
            echo "$TASK_DEFINITIONS" | tr '\t' '\n' | while read TASK_DEF_ARN; do
              echo "Deregistering task definition $TASK_DEF_ARN"
              aws ecs deregister-task-definition --task-definition $TASK_DEF_ARN || true
            done
          fi
          
          # 4. Delete the cluster
          echo "Deleting cluster $CLUSTER_NAME"
          aws ecs delete-cluster --cluster $CLUSTER_NAME || true
        else
          echo "No ECS cluster found matching 'online-compiler'"
        fi

        # 5. Clean up IAM roles and policies
        echo "Cleaning up IAM roles and policies..."
        
        # Clean up execution role
        EXEC_ROLE="online-compiler-execution-role"
        echo "Cleaning up execution role: $EXEC_ROLE"
        ATTACHED_POLICIES=$(aws iam list-attached-role-policies --role-name $EXEC_ROLE --query 'AttachedPolicies[*].PolicyArn' --output text 2>/dev/null || echo "")
        if [ ! -z "$ATTACHED_POLICIES" ]; then
          echo "$ATTACHED_POLICIES" | tr '\t' '\n' | while read POLICY_ARN; do
            echo "Detaching policy $POLICY_ARN from role $EXEC_ROLE"
            aws iam detach-role-policy --role-name $EXEC_ROLE --policy-arn $POLICY_ARN || true
          done
        fi
        aws iam delete-role --role-name $EXEC_ROLE || true

        # Clean up task role
        TASK_ROLE="online-compiler-task-role"
        echo "Cleaning up task role: $TASK_ROLE"
        INLINE_POLICIES=$(aws iam list-role-policies --role-name $TASK_ROLE --query 'PolicyNames[]' --output text 2>/dev/null || echo "")
        if [ ! -z "$INLINE_POLICIES" ]; then
          echo "$INLINE_POLICIES" | tr '\t' '\n' | while read POLICY_NAME; do
            echo "Deleting inline policy $POLICY_NAME from role $TASK_ROLE"
            aws iam delete-role-policy --role-name $TASK_ROLE --policy-name $POLICY_NAME || true
          done
        fi
        aws iam delete-role --role-name $TASK_ROLE || true

        # 6. Clean up CloudWatch log groups
        echo "Cleaning up CloudWatch log groups..."
        LOG_GROUPS=$(aws logs describe-log-groups --log-group-name-prefix "/ecs/online-compiler" --query 'logGroups[].logGroupName' --output text || echo "")
        if [ ! -z "$LOG_GROUPS" ]; then
          echo "$LOG_GROUPS" | tr '\t' '\n' | while read LOG_GROUP; do
            echo "Deleting log group $LOG_GROUP"
            aws logs delete-log-group --log-group-name "$LOG_GROUP" || true
          done
        fi

        # 7. Verify all resources are cleaned up
        echo "Verifying cleanup..."
        
        # Verify cluster
        VERIFY_CLUSTER=$(aws ecs describe-clusters --clusters $CLUSTER_NAME --query 'clusters[].status' --output text 2>/dev/null || echo "")
        if [ ! -z "$VERIFY_CLUSTER" ]; then
          echo "Warning: Cluster might still exist. Status: $VERIFY_CLUSTER"
        fi
        
        # Verify IAM roles
        for ROLE in "$EXEC_ROLE" "$TASK_ROLE"; do
          if aws iam get-role --role-name $ROLE 2>/dev/null; then
            echo "Warning: Role $ROLE might still exist"
          fi
        done

        echo "Resource cleanup completed"
        
    - name: Clean Up VPC Resources
      run: |
        echo "Starting VPC cleanup..."
        
        # Find VPC by tag
        VPC_ID=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=online-compiler-vpc" --query 'Vpcs[0].VpcId' --output text || echo "")
        
        if [ ! -z "$VPC_ID" ] && [ "$VPC_ID" != "None" ]; then
          echo "Found VPC: $VPC_ID"

          # 1. Delete NAT Gateways if any and wait for deletion
          NAT_GATEWAYS=$(aws ec2 describe-nat-gateways --filter "Name=vpc-id,Values=$VPC_ID" --query 'NatGateways[*].NatGatewayId' --output text || echo "")
          if [ ! -z "$NAT_GATEWAYS" ]; then
            echo "$NAT_GATEWAYS" | tr '\t' '\n' | while read NAT_GATEWAY; do
              echo "Deleting NAT Gateway: $NAT_GATEWAY"
              aws ec2 delete-nat-gateway --nat-gateway-id $NAT_GATEWAY || true
            done
            echo "Waiting for NAT Gateways to delete..."
            sleep 30
          fi

          # 2. Delete Load Balancers if any
          LBS=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?VpcId=='$VPC_ID'].LoadBalancerArn" --output text || echo "")
          if [ ! -z "$LBS" ]; then
            echo "$LBS" | tr '\t' '\n' | while read LB; do
              echo "Deleting Load Balancer: $LB"
              aws elbv2 delete-load-balancer --load-balancer-arn $LB || true
            done
            echo "Waiting for Load Balancers to delete..."
            sleep 30
          fi

          # 3. Find and delete all Security Groups (except default)
          echo "Cleaning up Security Groups..."
          SEC_GROUPS=$(aws ec2 describe-security-groups --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=!default" --query 'SecurityGroups[*].GroupId' --output text || echo "")
          if [ ! -z "$SEC_GROUPS" ]; then
            echo "$SEC_GROUPS" | tr '\t' '\n' | while read SEC_GROUP; do
              echo "Deleting Security Group: $SEC_GROUP"
              aws ec2 delete-security-group --group-id $SEC_GROUP || true
            done
          fi

          # 4. Detach and delete Internet Gateway
          IGW=$(aws ec2 describe-internet-gateways --filters "Name=attachment.vpc-id,Values=$VPC_ID" --query 'InternetGateways[0].InternetGatewayId' --output text || echo "")
          if [ ! -z "$IGW" ] && [ "$IGW" != "None" ]; then
            echo "Detaching Internet Gateway: $IGW"
            aws ec2 detach-internet-gateway --internet-gateway-id $IGW --vpc-id $VPC_ID || true
            echo "Deleting Internet Gateway: $IGW"
            aws ec2 delete-internet-gateway --internet-gateway-id $IGW || true
          fi

          # 5. Delete Subnets
          SUBNETS=$(aws ec2 describe-subnets --filters "Name=vpc-id,Values=$VPC_ID" --query 'Subnets[*].SubnetId' --output text || echo "")
          if [ ! -z "$SUBNETS" ]; then
            echo "$SUBNETS" | tr '\t' '\n' | while read SUBNET; do
              echo "Deleting Subnet: $SUBNET"
              aws ec2 delete-subnet --subnet-id $SUBNET || true
            done
          fi

          # 6. Delete Route Tables (except main)
          ROUTE_TABLES=$(aws ec2 describe-route-tables --filters "Name=vpc-id,Values=$VPC_ID" --query 'RouteTables[?Associations[0].Main != `true`].RouteTableId' --output text || echo "")
          if [ ! -z "$ROUTE_TABLES" ]; then
            echo "$ROUTE_TABLES" | tr '\t' '\n' | while read RT; do
              # First remove route table associations
              ASSOCIATIONS=$(aws ec2 describe-route-tables --route-table-id $RT --query 'RouteTables[0].Associations[?!Main].RouteTableAssociationId' --output text || echo "")
              if [ ! -z "$ASSOCIATIONS" ]; then
                echo "$ASSOCIATIONS" | tr '\t' '\n' | while read ASSOC; do
                  echo "Deleting Route Table Association: $ASSOC"
                  aws ec2 disassociate-route-table --association-id $ASSOC || true
                done
              fi
              echo "Deleting Route Table: $RT"
              aws ec2 delete-route-table --route-table-id $RT || true
            done
          fi

          # 7. Delete VPC Endpoints if any
          VPC_ENDPOINTS=$(aws ec2 describe-vpc-endpoints --filters "Name=vpc-id,Values=$VPC_ID" --query 'VpcEndpoints[*].VpcEndpointId' --output text || echo "")
          if [ ! -z "$VPC_ENDPOINTS" ]; then
            echo "Deleting VPC Endpoints..."
            aws ec2 delete-vpc-endpoints --vpc-endpoint-ids $VPC_ENDPOINTS || true
          fi

          # 8. Delete Network ACLs (except default)
          NACLS=$(aws ec2 describe-network-acls --filters "Name=vpc-id,Values=$VPC_ID" "Name=default,Values=false" --query 'NetworkAcls[*].NetworkAclId' --output text || echo "")
          if [ ! -z "$NACLS" ]; then
            echo "$NACLS" | tr '\t' '\n' | while read NACL; do
              echo "Deleting Network ACL: $NACL"
              aws ec2 delete-network-acl --network-acl-id $NACL || true
            done
          fi

          # 9. Finally, attempt to delete the VPC
          echo "Deleting VPC: $VPC_ID"
          aws ec2 delete-vpc --vpc-id $VPC_ID || true
        else
          echo "No VPC found with tag Name:online-compiler-vpc"
        fi

        # Verify VPC deletion
        sleep 10
        VPC_CHECK=$(aws ec2 describe-vpcs --filters "Name=tag:Name,Values=online-compiler-vpc" --query 'Vpcs[0].VpcId' --output text 2>/dev/null || echo "")
        if [ ! -z "$VPC_CHECK" ] && [ "$VPC_CHECK" != "None" ]; then
          echo "Warning: VPC might still exist: $VPC_CHECK"
        else
          echo "VPC deletion verified"
        fi

        echo "VPC cleanup completed"
    - name: Terraform Plan Destroy
      id: plan
      run: |
        terraform plan -destroy -no-color
      continue-on-error: true

    - name: Terraform Destroy
      run: terraform destroy -auto-approve
